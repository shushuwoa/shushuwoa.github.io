<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【PAT乙级】1003 我要通过！ (20分)</title>
      <link href="/2022/07/29/%E3%80%90PAT%E4%B9%99%E7%BA%A7%E3%80%911003%20%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81%20(20%E5%88%86)/"/>
      <url>/2022/07/29/%E3%80%90PAT%E4%B9%99%E7%BA%A7%E3%80%911003%20%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87%EF%BC%81%20(20%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<h2 id="1003-我要通过！-20分"><strong>1003 我要通过！ (20分)</strong></h2><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式：-2">输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (≤10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式：-2">输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例：-2">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br><span class="line">APT</span><br><span class="line">APATTAA</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h3 id="思路：-2">思路：</h3><p>这道题说难也不是很难，说简单也不简单，主要是要理解<strong>如何判断一个字符串是否正确</strong>。接下来我们一条一条的看：</p><ol><li><p>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；<br>由此可以得出，字符串的组成只有<code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，一旦出现其他的字符可以直接判断<code>NO</code>。那么用什么结构来存储输入的字符串，以及更严格的要求，还得看接下来的两个条件。</p></li><li><p>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；<br>这里<code>x</code>其实就相当于未知数，也就是说<code>PAT</code>这个字符串前后可以接受 <strong>加上两个相等的字符串(要么为空要么全是<code>A</code>)</strong> ，形如这样的字符串都可以判断<code>YES</code><br><img src="https://s2.doveoss.com/i/2022/07/29/tzmuv2.png" alt="图片1"><br>那么问题来了， <em><strong>如何在代码中判断这个<code>PAT</code>前后加的两个字符串是否符合要求呢？</strong></em> 在这里，C++提供的 <strong>string</strong> 其实就可以满足了，遍历string容器，确定字符<code>P</code>和字符<code>T</code>的位置，就可以很方便的判断前后字符串是否符合要求。</p></li><li><p>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。<br>这里是最复杂的，我们慢慢分析。这里有一个大前提就是：<em><strong>如果 <code>aPbTc</code> 是正确的</strong></em>。那以我们现在的要求，要想让<code>aPbTc</code>是正确的，那么<code>PT</code>中间的<code>b</code>肯定是字符串<code>A</code>，而且<code>a</code>和<code>c</code>要相等才行，那么就可以代入一下第二个要求的图片。</p><p>①. <code>a</code>=<code>c</code>=‘∅’(a和c是空串)，<code>b</code>=<code>A</code>。再看 <em><strong>那么 <code>aPbATca</code> 也是正确的</strong></em> ，那这个字符串就变成了<code>PAAT</code>，由题意知，这个也是对的。那如此嵌套循环下去，<code>PAAAT</code>，<code>PAAAAT</code>……等等也是正确的。因为只要是正确的字符串，就可以继续套入 <code>aPbATca</code> 这个“公式”。用人话说就是： <em><strong><code>P</code> 和 <code>T</code>之间至少有一个 <code>A</code></strong></em>。</p><p>②. <code>a</code>=<code>c</code>=‘A’，<code>b</code>=‘A’。代入公式得<code>APAATAA</code>，现在字符串就有点奇怪了，好像看不出什么规律，那么我们接着往下看。<br><img src="https://s2.doveoss.com/i/2022/07/29/tzmu3i.png" alt="图片2"></p><p>③. <code>a</code>=<code>c</code>=“AA”，<code>b</code>=‘A’。代入公式得<code>AAPAATAAAA</code>，这下是不是有点思路了，这是不是 <strong>(P前面的A) × (PT中间的A) = (T后面的A)呢</strong> ？不确定？那我们再随机验证一下。<br><img src="https://s2.doveoss.com/i/2022/07/29/tzmx5s.png" alt="图片3"></p><p>④.  <code>a</code>=‘A’ <code>c</code>=“AA”，<code>b</code>=‘AA’。这次<code>a</code>和<code>c</code>不相等了，我们再代入一次公式，得到了<code>APAAATAAA</code>，现在就确定了，就是 <strong>(P前面的A) × (PT中间的A) = (T后面的A)</strong> 。<br><img src="https://s2.doveoss.com/i/2022/07/29/tzn011.png" alt="2E08DDB156D1F7852178DC1CE6443BF7"></p><p>其实同样的规律也可以用于第二个要求，因为中间只有一个<code>A</code>，那么不管两边有多少个<code>A</code>，只要数量相等就可以，因为1乘任意数就等于任意数嘛。但是这里还有一个坑，三个要求全部看完之后，其实还有一些条件我们没有发现，接下来我们去看看输入样例和输出样例。</p></li><li><p>在样例中，xPATx、PT、Whatever、APAAATAA、APT、APATTAA都是错的，其中xPATx、Whatever都是因为包含有其他字符而错误。PT和APT是因为第三条的第一点，PT之间至少有一个A，所以PT错。APAAATAA这是因为A之间的关系不满足，所以也是错的。那么这个APATTAA是因为什么错呢，虽然说这个字符串A之间的关系也不满足(因为1 × 1 应该为 1 才对)，但是还有一个致命的错误那就是 <strong>有两个T</strong> ，导致我们无法判断是哪个T的前后，包括P也是一样，所以这里应该还有一个条件是： <strong>字母<code>P</code>和字母<code>T</code>只能有一个</strong> 。</p></li><li><p>现在所有的条件都齐全了，那么在代码上由于要判断这个字符串所包含字符的种类、数量及位置，这里我想到用 <strong>map容器</strong> 来存储这个字符串的信息。</p></li></ol><h3 id="代码如下：-2">代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">//输入字符串的个数</span></span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s; <span class="comment">//循环输入字符串</span></span><br><span class="line">        map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m; <span class="comment">//对组第一个表示字符，第二个表示其对应的数量</span></span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>, t = <span class="number">0</span>; <span class="comment">//利用整型变量存储P和T的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            m[s[j]]++; <span class="comment">//储存各字符的数量信息</span></span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;P&#x27;</span>) <span class="comment">//如果遍历到P了，就把P的位置记录下来</span></span><br><span class="line">                p = j;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;T&#x27;</span>) <span class="comment">//如果遍历到T了，就把T的位置记录下来</span></span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; m[<span class="string">&#x27;T&#x27;</span>] == <span class="number">1</span> &amp;&amp; m[<span class="string">&#x27;P&#x27;</span>] == <span class="number">1</span> &amp;&amp; (t - p &gt; <span class="number">1</span>) &amp;&amp; m[<span class="string">&#x27;A&#x27;</span>] != <span class="number">0</span> &amp;&amp; p * (t - p - <span class="number">1</span>) == (s.<span class="built_in">size</span>() - <span class="number">1</span> - t))</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.只能有PAT三个字母</span></span><br><span class="line"><span class="comment">            2.字母T只能有一个</span></span><br><span class="line"><span class="comment">            3.字母P只能有一个</span></span><br><span class="line"><span class="comment">            4.T和P中间起码有一个A</span></span><br><span class="line"><span class="comment">            5.A的数量不能为0</span></span><br><span class="line"><span class="comment">            6.P前面A的数量 × P和T之间A的数量 == T后面A的数量</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT Basic </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PAT乙级】1002 写出这个数 (20分)</title>
      <link href="/2022/07/28/%E3%80%90PAT%E4%B9%99%E7%BA%A7%E3%80%911002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0%20(20%E5%88%86)/"/>
      <url>/2022/07/28/%E3%80%90PAT%E4%B9%99%E7%BA%A7%E3%80%911002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0%20(20%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<h2 id="1002-写出这个数-20分">1002 写出这个数 (20分)</h2><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h3 id="输入格式：">输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10^100^。</p><h3 id="输出格式：">输出格式：</h3><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h3 id="输入样例：">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><h3 id="输出样例：">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h3 id="思路：">思路：</h3><p>首先看到输入的<strong>n</strong>是小于<strong>10^100^</strong>， <em><strong>无论是int还是long long都存放不下这么大的整数，所以只能用字符串类型一个一个地读取</strong></em>，再利用 <strong>减去字符串0</strong> 的操作来得到当前输入的数字，用于累加每一位数字求和。关于求和之后如何读出这个数，这里我利用到了 <strong>vector容器</strong> , <em><strong>从数字的低位开始逐步push进入vector容器</strong></em>，然后再利用一个自定义的拼音数组，进行反向读取即可。</p><h3 id="代码如下：">代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    string a[<span class="number">15</span>] = &#123;<span class="string">&quot;ling&quot;</span>, <span class="string">&quot;yi&quot;</span>, <span class="string">&quot;er&quot;</span>, <span class="string">&quot;san&quot;</span>, <span class="string">&quot;si&quot;</span>, <span class="string">&quot;wu&quot;</span>, <span class="string">&quot;liu&quot;</span>, <span class="string">&quot;qi&quot;</span>, <span class="string">&quot;ba&quot;</span>, <span class="string">&quot;jiu&quot;</span>&#125;; <span class="comment">//自定义的拼音数组，以便一一对应地读出来</span></span><br><span class="line">    vector&lt;string&gt; v; <span class="comment">//存放总和拆分的数字</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += s[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">//得到读入的数字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (sum) <span class="comment">//拆分sum，并push</span></span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(a[sum % <span class="number">10</span>]);</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = v.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; v[i];</span><br><span class="line">        <span class="keyword">if</span> (i) <span class="comment">//注意最后一个拼音后面没有空格</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT Basic </tag>
            
            <tag> 简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PAT乙级】1001 害死人不偿命的(3n+1)猜想 （15分）</title>
      <link href="/2022/07/28/%E3%80%90PAT%E4%B9%99%E7%BA%A7%E3%80%911001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84(3n+1)%E7%8C%9C%E6%83%B3%20(15%E5%88%86)/"/>
      <url>/2022/07/28/%E3%80%90PAT%E4%B9%99%E7%BA%A7%E3%80%911001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84(3n+1)%E7%8C%9C%E6%83%B3%20(15%E5%88%86)/</url>
      
        <content type="html"><![CDATA[<h2 id="1001-害死人不偿命的-3n-1-猜想-（15分）">1001 害死人不偿命的(3n+1)猜想 （15分）</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><h3 id="输入格式：-3">输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式：-3">输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例：-3">输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例：-3">输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="思路：-3">思路：</h3><p>在“砍”的同时使计数器自增，当输入的整数最后等于1时退出循环，最后输出结果即可。</p><h3 id="代码如下：-3">代码如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>; <span class="comment">//用于记录步数</span></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//偶数</span></span><br><span class="line">        &#123;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            n = (<span class="number">3</span>*n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; step;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PAT Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT Basic </tag>
            
            <tag> 简单 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
